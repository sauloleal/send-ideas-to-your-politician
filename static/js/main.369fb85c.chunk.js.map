{"version":3,"sources":["politician-photo.png","header.png","SectionPresentation/SectionPresentation.jsx","SectionPresentation/index.js","SectionTwo/SectionTwo.jsx","SectionTwo/index.js","SectionThree/SectionThree.jsx","SectionThree/index.js","SectionForm/index.js","SectionForm/SectionForm.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","SectionPresentation","description","onParticipateClick","className","src","politicianPhoto","alt","onClick","SectionTwo","SectionThree","SectionForm","React","forwardRef","props","ref","htmlFor","id","type","name","App","formRef","useRef","headerImage","window","scrollTo","current","offsetTop","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sIAAAA,EAAOC,QAAU,IAA0B,8C,kBCA3CD,EAAOC,QAAU,IAA0B,oC,uPCyB5BC,ICvBAA,EDGf,YAAmE,IAApCC,EAAmC,EAAnCA,YAAaC,EAAsB,EAAtBA,mBAC1C,OACE,yBAAKC,UAAU,gBACb,yBAAKA,UAAU,SACb,yBAAKC,IAAKC,IAAiBC,IAAKL,KAElC,yBAAKE,UAAU,aACb,yBAAKA,UAAU,UAAf,YAEE,6BACA,sDACA,6BAJF,oBAOA,4BAAQI,QAASL,EAAoBC,UAAU,cAA/C,sB,MEHOK,ICdAA,EDEf,WACE,OACE,yBAAKL,UAAU,eACb,yBAAKA,UAAU,YAAf,wCAGA,yBAAKA,UAAU,gB,MEQNM,IChBAA,EDGf,YAAwC,IAAhBR,EAAe,EAAfA,YACtB,OACE,yBAAKE,UAAU,iBACb,yBAAKA,UAAU,aAGf,yBAAKA,UAAU,aACb,yBAAKC,IAAKC,IAAiBC,IAAKL,OEVzBS,G,MCEKC,IAAMC,YAAW,SAACC,EAAOC,GAAR,OACnC,yBAAKA,IAAKA,EAAKX,UAAU,gBACvB,2DAGA,+CAGA,8BACE,2BAAOY,QAAQ,QAAf,QAGA,2BAAOC,GAAG,OAAOC,KAAK,OAAOC,KAAK,e,sBCczBC,MArBf,WACE,IAAMC,EAAUC,iBAAO,MACjBpB,EAAc,6CACpB,OACE,yBAAKE,UAAU,OACb,gCACE,yBAAKC,IAAKkB,IAAahB,IAAKL,KAE9B,kBAAC,EAAD,CACEC,mBAAoB,WAClBqB,OAAOC,SAAS,EAAGJ,EAAQK,QAAQC,YAErCzB,YAAaA,IAEf,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAcA,YAAaA,IAC3B,kBAAC,EAAD,CAAaa,IAAKM,MCbJO,QACW,cAA7BJ,OAAOK,SAASC,UAEe,UAA7BN,OAAOK,SAASC,UAEhBN,OAAOK,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.369fb85c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/politician-photo.f3c0c795.png\";","module.exports = __webpack_public_path__ + \"static/media/header.9b9f0317.png\";","import React from 'react';\n\nimport politicianPhoto from '../politician-photo.png';\nimport './SectionPresentation.css';\n\nfunction SectionPresentation({ description, onParticipateClick }) {\n  return (\n    <div className=\"presentation\">\n      <div className=\"photo\">\n        <img src={politicianPhoto} alt={description} />\n      </div>\n      <div className=\"right-box\">\n        <div className=\"slogan\">\n          QUAL É\n          <br/>\n          <strong>A SENHOR DO BONFIM</strong>\n          <br/>\n          DOS SEUS SONHOS?\n        </div>\n        <button onClick={onParticipateClick} className=\"go-to-form\">ENVIE SUA IDEIA</button>\n      </div>\n    </div>\n  );\n}\n\nexport default SectionPresentation;\n","import SectionPresentation from './SectionPresentation';\n\nexport default SectionPresentation;\n","import React from 'react';\n\nimport './SectionTwo.css';\n\nfunction SectionTwo() {\n  return (\n    <div className=\"section-two\">\n      <div className=\"left-box\">\n        O QUE É O PROGRAMA PARTICIPATIVO?\n      </div>\n      <div className=\"right-box\">\n      </div>\n    </div>\n  );\n}\n\nexport default SectionTwo;\n","import SectionTwo from './SectionTwo';\n\nexport default SectionTwo;\n","import React from 'react';\n\nimport politicianPhoto from '../politician-photo.png';\nimport './SectionThree.css';\n\nfunction SectionThree({ description }) {\n  return (\n    <div className=\"section-three\">\n      <div className=\"text-box\">\n        \n      </div>\n      <div className=\"title-box\">\n        <img src={politicianPhoto} alt={description} />\n      </div>\n    </div>\n  );\n}\n\nexport default SectionThree;\n","import SectionThree from './SectionThree';\n\nexport default SectionThree;\n","import SectionForm from './SectionForm';\n\nexport default SectionForm;\n","import React from 'react';\n\nimport './SectionForm.css';\n\nconst SectionForm = React.forwardRef((props, ref) => (\n  <div ref={ref} className=\"section-form\">\n    <h1>\n      PARTICIPE E ENVIE SUA IDEIA\n    </h1>\n    <h2>\n      QUESTIONÁRIO\n    </h2>\n    <form>\n      <label htmlFor=\"nome\">\n        NOME\n      </label>\n      <input id=\"nome\" type=\"text\" name=\"nome\" />\n    </form>\n  </div>\n));\n\nexport default SectionForm;\n","import React, { useRef } from 'react';\n\nimport SectionPresentation from './SectionPresentation';\nimport SectionTwo from './SectionTwo';\nimport SectionThree from './SectionThree';\nimport SectionForm from './SectionForm';\nimport headerImage from './header.png';\nimport './App.css';\n\nfunction App() {\n  const formRef = useRef(null);\n  const description = \"Laércio Jr: Pré-candidato a Prefeito\";\n  return (\n    <div className=\"app\">\n      <header>\n        <img src={headerImage} alt={description} />\n      </header>\n      <SectionPresentation\n        onParticipateClick={() => {\n          window.scrollTo(0, formRef.current.offsetTop)\n        }}\n        description={description}\n      />\n      <SectionTwo />\n      <SectionThree description={description} />\n      <SectionForm ref={formRef} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}